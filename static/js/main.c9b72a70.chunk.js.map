{"version":3,"sources":["hoc/Layout/Layout.js","components/ListItem/ListItem.js","components/Tasks/TaskItem/TaskItem.js","components/Tasks/Tasks.js","shared/utility.js","containers/Lists/Lists.js","App.js","serviceWorker.js","index.js"],"names":["Layout","this","props","children","Component","ListItem","onClick","clicked","value","TaskItem","type","checked","selected","name","Tasks","back","takItems","map","index","key","selectTask","updateObject","oldObject","updatedProperties","updateByIndex","indexChange","list","el","Lists","state","tasks","selectedTask","listClickHandler","listIndex","setState","backToListHandler","selectTaskItem","selectedIndex","updatedTask","updatedList","content","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yRAYeA,E,iLARP,OACI,8BACKC,KAAKC,MAAMC,c,GAJPC,aCAN,SAASC,EAASH,GAC7B,OACI,yBAAKI,QAASJ,EAAMK,SACfL,EAAMM,OCHJ,SAASC,EAASP,GAC7B,OACI,6BACI,2BAAOQ,KAAK,WAAWJ,QAASJ,EAAMK,QAASI,QAAUT,EAAMM,MAAMI,WAClEV,EAAMM,MAAMK,MCHZ,SAASC,EAAMZ,GAC1B,OACI,6BACI,4BAAQI,QAASJ,EAAMa,MAAvB,QACCb,EAAMc,SAASC,KAAI,SAACT,EAAOU,GAAR,OAAmB,kBAACT,EAAD,CAAUU,IAAKD,EAAOV,MAAOA,EAAOD,QAAS,kBAAML,EAAMkB,WAAWF,U,gPCPhH,IAAMG,EAAe,SAACC,EAAWC,GACpC,O,yVAAO,CAAP,GACSD,EADT,GAESC,IAIAC,EAAgB,SAACC,EAAaC,EAAMH,GAE7C,OADc,YAAOG,GACHT,KAAI,SAACU,EAAIT,GAAL,OACjBA,IAAUO,EACPJ,EAAaK,EAAKD,GAAcF,GAChCI,MCPSC,E,2MACjBC,MAAQ,CACJH,KAAM,CACF,CACIb,KAAM,YACNiB,MAAO,CACH,CACIjB,KAAM,QACND,UAAU,GAEd,CACIC,KAAM,SACND,UAAU,GAEd,CACIC,KAAM,YACND,UAAU,KAItB,CACIC,KAAM,MACNiB,MAAO,CACH,CACIjB,KAAM,aACND,UAAU,GAEd,CACIC,KAAM,gBACND,UAAU,GAEd,CACIC,KAAM,WACND,UAAU,KAItB,CACIC,KAAM,WACNiB,MAAO,CACH,CACIjB,KAAM,eACND,UAAU,GAEd,CACIC,KAAM,iBACND,UAAU,GAEd,CACIC,KAAM,SACND,UAAU,KAItB,CACIC,KAAM,SACNiB,MAAO,CACH,CACIjB,KAAM,gBACND,UAAU,GAEd,CACIC,KAAM,cACND,UAAU,GAEd,CACIC,KAAM,iBACND,UAAU,MAK1BmB,aAAc,M,EAGlBC,iBAAmB,SAACC,GAChB,EAAKC,SAAS,CAACH,aAAcE,K,EAGjCE,kBAAoB,WAChB,EAAKD,SAAS,CAACH,aAAc,Q,EAGjCK,eAAiB,SAACC,GACd,IAAMC,EAAcd,EAAca,EAAe,EAAKR,MAAMH,KAAK,EAAKG,MAAME,cAAcD,MAAQ,CAAElB,UAAW,EAAKiB,MAAMH,KAAK,EAAKG,MAAME,cAAcD,MAAMO,GAAezB,WACvK2B,EAAcf,EAAc,EAAKK,MAAME,aAAc,EAAKF,MAAMH,KAAO,CAAEI,MAAOQ,IACtF,EAAKJ,SAAS,CACTR,KAAMa,K,wEAIL,IAAD,OACDC,EAAUvC,KAAK4B,MAAMH,KAAKT,KAAI,SAACT,EAAOU,GAAR,OAAiB,kBAACb,EAAD,CAAUc,IAAKD,EAAOV,MAAOA,EAAMK,KAAMN,QAAS,kBAAM,EAAKyB,iBAAiBd,SAQjI,OAPgC,OAA5BjB,KAAK4B,MAAME,eACXS,EAAU,kBAAC1B,EAAD,CACEC,KAAMd,KAAKkC,kBACXnB,SAAUf,KAAK4B,MAAMH,KAAKzB,KAAK4B,MAAME,cAAcD,MACnDV,WAAYnB,KAAKmC,kBAI7B,6BACMI,O,GAtGiBpC,aCQpBqC,MARf,WACE,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,QCIcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.c9b72a70.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Layout extends Component {\r\n    render() {\r\n        return (\r\n            <main>\r\n                {this.props.children}\r\n            </main>\r\n        );\r\n    };\r\n}\r\n\r\nexport default Layout;","import React from 'react'\r\n\r\nexport default function ListItem(props) {\r\n    return (\r\n        <div onClick={props.clicked}>\r\n            {props.value}\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function TaskItem(props) {\r\n    return (\r\n        <div> \r\n            <input type=\"checkbox\" onClick={props.clicked} checked={ props.value.selected }/>\r\n             { props.value.name }\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport TaskItem from './TaskItem/TaskItem'\r\n\r\nexport default function Tasks(props) {\r\n    return (\r\n        <div>\r\n            <button onClick={props.back}>Back</button>\r\n            {props.takItems.map((value, index) => (<TaskItem key={index} value={value} clicked={() => props.selectTask(index)} />))}\r\n        </div>\r\n    )\r\n}\r\n","export const updateObject = (oldObject, updatedProperties) => {\r\n    return {\r\n          ...oldObject,\r\n          ...updatedProperties\r\n    }\r\n}\r\n\r\nexport const updateByIndex = (indexChange, list, updatedProperties) => {\r\n    let copyObject = [...list];\r\n    return copyObject.map((el, index)=> (\r\n         index === indexChange ?\r\n            updateObject(list[indexChange], updatedProperties):\r\n            el)\r\n    );\r\n}","import React, { Component } from 'react'\r\nimport ListItem from '../../components/ListItem/ListItem'\r\nimport Tasks from '../../components/Tasks/Tasks'\r\nimport { updateByIndex } from '../../shared/utility'\r\n\r\nexport default class Lists extends Component {\r\n    state = {\r\n        list: [\r\n            {\r\n                name: \"Groceries\",\r\n                tasks: [\r\n                    {\r\n                        name: \"Bread\",\r\n                        selected: false \r\n                    },\r\n                    {\r\n                        name: \"Cheese\",\r\n                        selected: false \r\n                    },\r\n                    {\r\n                        name: \"Chocolate\",\r\n                        selected: false \r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                name: \"GYM\",\r\n                tasks: [\r\n                    {\r\n                        name: \"Chest 3x10\",\r\n                        selected: false \r\n                    },\r\n                    {\r\n                        name: \"Sholders 3x12\",\r\n                        selected: false \r\n                    },\r\n                    {\r\n                        name: \"Legs 3x8\",\r\n                        selected: false \r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                name: \"Expenses\",\r\n                tasks: [\r\n                    {\r\n                        name: \"Hair Cut $10\",\r\n                        selected: false \r\n                    },\r\n                    {\r\n                        name: \"Street food $5\",\r\n                        selected: false \r\n                    },\r\n                    {\r\n                        name: \"Bus $2\",\r\n                        selected: false \r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                name: \"Others\",\r\n                tasks: [\r\n                    {\r\n                        name: \"Renew license\",\r\n                        selected: false \r\n                    },\r\n                    {\r\n                        name: \"Study React\",\r\n                        selected: false \r\n                    },\r\n                    {\r\n                        name: \"Study HTML/CSS\",\r\n                        selected: false \r\n                    }                    \r\n                ]\r\n            }\r\n        ],\r\n        selectedTask: null\r\n    }\r\n\r\n    listClickHandler = (listIndex) => {\r\n        this.setState({selectedTask: listIndex});\r\n    }\r\n\r\n    backToListHandler = () => {\r\n        this.setState({selectedTask: null});\r\n    }\r\n\r\n    selectTaskItem = (selectedIndex) => {\r\n        const updatedTask = updateByIndex(selectedIndex, this.state.list[this.state.selectedTask].tasks,  { selected: !this.state.list[this.state.selectedTask].tasks[selectedIndex].selected });\r\n        const updatedList = updateByIndex(this.state.selectedTask, this.state.list,  { tasks: updatedTask });\r\n        this.setState({\r\n             list: updatedList\r\n        });\r\n    }\r\n\r\n    render() {\r\n        let content = this.state.list.map((value, index)=>(<ListItem key={index} value={value.name} clicked={() => this.listClickHandler(index)} />));\r\n        if (this.state.selectedTask !== null) {\r\n            content = <Tasks \r\n                        back={this.backToListHandler} \r\n                        takItems={this.state.list[this.state.selectedTask].tasks}\r\n                        selectTask={this.selectTaskItem} />;\r\n        }\r\n        \r\n        return (\r\n            <div>\r\n                { content }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport Layout from './hoc/Layout/Layout';\nimport Lists from './containers/Lists/Lists';\n\nfunction App() {\n  return (\n    <Layout>\n      <Lists></Lists>\n    </Layout>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}