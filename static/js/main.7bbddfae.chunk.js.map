{"version":3,"sources":["hoc/Layout/Layout.js","components/ListItem/ListItem.js","hoc/Auxiliary/Auxiliary.js","containers/Lists/Lists.js","store/actions.js","store/actionTypes.js","components/TaskItem/TaskItem.js","containers/Tasks/Tasks.js","App.js","serviceWorker.js","shared/utility.js","store/reducers.js","index.js"],"names":["Layout","this","props","children","Component","ListItem","onClick","clicked","value","auxiliary","Lists","state","newItem","selectListHandler","index","onSelectList","history","push","addNewHandler","event","preventDefault","onAddList","setState","onChangeListNameHandler","target","onInitList","content","list","Auxiliary","type","onChange","map","key","name","connect","selectedTask","selectedList","dispatch","tasks","selected","listName","actions","listIndex","TaskItem","checked","Tasks","toListHandler","onChangeTaskNameHandler","onAddTask","selectTaskItemHandler","selectedIndex","onSelectTask","to","taskName","taskIndex","withRouter","path","component","exact","Boolean","window","location","hostname","match","updateObject","oldObject","updatedProperties","updateByIndex","indexChange","el","initialState","initList","action","newList","addList","concat","selectList","addTask","addedTasksList","selectTask","newTasks","reducer","composeEnhancers","compose","store","createStore","applyMiddleware","thunk","app","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7bbddfae.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Layout extends Component {\r\n    render() {\r\n        return (\r\n            <main>\r\n                {this.props.children}\r\n            </main>\r\n        );\r\n    };\r\n}\r\n\r\nexport default Layout;","import React from 'react'\r\n\r\nexport default function ListItem(props) {\r\n    return (\r\n        <div onClick={props.clicked}>\r\n            {props.value}\r\n        </div>\r\n    )\r\n}\r\n","const auxiliary = props => props.children;  \r\nexport default auxiliary;","import React, { Component } from 'react'\r\nimport ListItem from '../../components/ListItem/ListItem'\r\nimport Auxiliary from '../../hoc/Auxiliary/Auxiliary'\r\nimport { connect } from 'react-redux'\r\nimport * as actions from '../../store/actions'\r\n\r\nclass Lists extends Component {\r\n    state = {\r\n        newItem: \"\"\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.onInitList();\r\n    }\r\n\r\n    selectListHandler = (index) => {\r\n        this.props.onSelectList(index);\r\n        this.props.history.push('/task');\r\n    }\r\n\r\n    addNewHandler = (event) => {\r\n        event.preventDefault();   \r\n        this.props.onAddList(this.state.newItem);\r\n        this.setState({newItem: \"\"});     \r\n    }\r\n\r\n    onChangeListNameHandler = (event) => {\r\n        this.setState({newItem: event.target.value});\r\n    }\r\n\r\n    render() {\r\n        let content = <p>Loading...</p>;\r\n        if (this.props.list) {\r\n            content = (\r\n                <Auxiliary>\r\n                    <input type=\"text\" onChange={this.onChangeListNameHandler} value={this.state.newItem} />\r\n                    <button onClick={this.addNewHandler}>+</button>\r\n                    {   this.props.list.map((value, index)=>( \r\n                            <ListItem key={index} value={value.name} clicked={() => this.selectListHandler(index)} />\r\n                        ))\r\n                    }\r\n                </Auxiliary>\r\n            );\r\n            // if (this.props.selectedTask !== null) {\r\n            //     content = <Tasks \r\n            //                 back={this.backToListHandler} \r\n            //                 taskItems={this.props.list[this.state.selectedTask].tasks}\r\n            //                 selectTask={this.selectTaskItem}\r\n            //                 taskName={this.state.newItem} \r\n            //                 onChange={this.onChangeListNameHandler}\r\n            //                 onNewTask={this.addNewHandler}/>;\r\n            // }\r\n        }        \r\n        \r\n        return (\r\n            <div>\r\n                { content }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        list: state.list,\r\n        selectedTask: state.selectedList\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onInitList: () => dispatch(actions.initList()),\r\n        onAddList: (listName) => dispatch(actions.addList(listName)),\r\n        onSelectList: (index) => dispatch(actions.selectList(index)),\r\n    }\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps) (Lists); ","import * as actionTypes from './actionTypes';\r\n\r\nexport const initList = () => {\r\n    return {\r\n        type: actionTypes.INIT_LIST,\r\n        \r\n        list: [\r\n            {\r\n                name: \"Groceries\",\r\n                tasks: [\r\n                    {\r\n                        name: \"Bread\",\r\n                        selected: false \r\n                    },\r\n                    {\r\n                        name: \"Cheese\",\r\n                        selected: false \r\n                    },\r\n                    {\r\n                        name: \"Chocolate\",\r\n                        selected: false \r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                name: \"GYM\",\r\n                tasks: [\r\n                    {\r\n                        name: \"Chest 3x10\",\r\n                        selected: false \r\n                    },\r\n                    {\r\n                        name: \"Sholders 3x12\",\r\n                        selected: false \r\n                    },\r\n                    {\r\n                        name: \"Legs 3x8\",\r\n                        selected: false \r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                name: \"Expenses\",\r\n                tasks: [\r\n                    {\r\n                        name: \"Hair Cut $10\",\r\n                        selected: false \r\n                    },\r\n                    {\r\n                        name: \"Street food $5\",\r\n                        selected: false \r\n                    },\r\n                    {\r\n                        name: \"Bus $2\",\r\n                        selected: false \r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                name: \"Others\",\r\n                tasks: [\r\n                    {\r\n                        name: \"Renew license\",\r\n                        selected: false \r\n                    },\r\n                    {\r\n                        name: \"Study React\",\r\n                        selected: false \r\n                    },\r\n                    {\r\n                        name: \"Study HTML/CSS\",\r\n                        selected: false \r\n                    }                    \r\n                ]\r\n            }\r\n        ]\r\n    }\r\n}\r\n\r\nexport const addList = (listName) => {\r\n    return {\r\n        type: actionTypes.ADD_LIST,\r\n        listName: listName\r\n    }\r\n}\r\n\r\nexport const selectList = (index) => {\r\n    return {\r\n        type: actionTypes.SELECT_LIST,\r\n        listIndex: index\r\n    }\r\n}\r\n\r\nexport const addTask = (taskName) => {\r\n    return {\r\n        type: actionTypes.ADD_TASK,\r\n        taskName: taskName\r\n    }\r\n}\r\n\r\nexport const selectTask = (taskIndex) => {\r\n    return {\r\n        type: actionTypes.SELECT_TASK,\r\n        taskIndex: taskIndex\r\n    }\r\n}","export const INIT_LIST = 'INIT_LIST';\r\nexport const ADD_LIST = 'ADD_LIST';\r\nexport const DELETE_LIST = 'DELETE_LIST';\r\nexport const SELECT_LIST = 'SELECT_LIST';\r\n\r\nexport const ADD_TASK = 'ADD_TASK';\r\nexport const DELETE_TASK = 'DELETE_TASK';\r\nexport const SELECT_TASK = 'SELECT_TASK';\r\n ","import React from 'react'\r\n\r\nexport default function TaskItem(props) {\r\n    return (\r\n        <div> \r\n            <input type=\"checkbox\" onChange={props.clicked} checked={ props.value.selected }/>\r\n             { props.value.name }\r\n        </div>\r\n    )\r\n}\r\n","import React, {Component} from 'react'\r\nimport TaskItem from '../../components/TaskItem/TaskItem'\r\nimport {Redirect} from 'react-router-dom'\r\nimport { connect } from 'react-redux'\r\nimport * as actions from '../../store/actions'\r\n\r\nclass Tasks extends Component {\r\n    state = {\r\n        newItem: \"\"\r\n    }\r\n\r\n    toListHandler = () => {\r\n        this.props.history.push('/list');\r\n    }\r\n\r\n    onChangeTaskNameHandler = (event) => {\r\n        this.setState({newItem: event.target.value});\r\n    }\r\n\r\n    addNewHandler = (event) => {\r\n        event.preventDefault();   \r\n        this.props.onAddTask(this.state.newItem);\r\n        this.setState({newItem: \"\"});                \r\n    }\r\n\r\n    selectTaskItemHandler = (selectedIndex) => {\r\n        this.props.onSelectTask(selectedIndex);\r\n    }\r\n\r\n    render () {\r\n        let content = <p>Loading ...</p>;\r\n        if (this.props.selectedList !== null) {\r\n            content = <div>\r\n                <button onClick={this.toListHandler}>Back</button>\r\n                <input type=\"text\" onChange={this.onChangeTaskNameHandler} value={this.state.newItem} />\r\n                <button onClick={this.addNewHandler}>+</button>\r\n                {this.props.tasks.map((value, index) => (\r\n                    <TaskItem \r\n                        key={index} \r\n                        value={value} \r\n                        clicked={() => this.selectTaskItemHandler(index)} />\r\n                ))}\r\n            </div>\r\n        } else {\r\n            content = <Redirect to=\"/\" />;\r\n        }\r\n        return content;\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        selectedList: state.selectedList,\r\n        tasks: state.tasks\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onAddTask: (taskName) => dispatch(actions.addTask(taskName)),\r\n        onSelectTask: (taskIndex) => dispatch(actions.selectTask(taskIndex))  \r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps) (Tasks);\r\n","import React from 'react'\nimport './App.css'\nimport { Route, Switch, withRouter, Redirect } from 'react-router-dom'\n\nimport Layout from './hoc/Layout/Layout'\nimport Lists from './containers/Lists/Lists'\nimport Tasks from './containers/Tasks/Tasks'\n\nfunction App() {\n  return (\n    <Layout>\n      <Switch>\n        <Route path=\"/task\" component={Tasks} />\n        <Route path=\"/\" exact component={Lists} />\n        <Redirect to=\"/\" />\n      </Switch>\n    </Layout>\n  );\n}\n\nexport default withRouter(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export const updateObject = (oldObject, updatedProperties) => {\r\n    return {\r\n          ...oldObject,\r\n          ...updatedProperties\r\n    }\r\n}\r\n\r\nexport const updateByIndex = (indexChange, list, updatedProperties) => {\r\n    let copyObject = [...list];\r\n    return copyObject.map((el, index)=> (\r\n         index === indexChange ?\r\n            updateObject(list[indexChange], updatedProperties):\r\n            el)\r\n    );\r\n}","import * as actionTypes from './actionTypes';\r\nimport { updateObject, updateByIndex } from '../shared/utility';\r\n\r\nconst initialState = { \r\n    list: null,\r\n    selectedList: null,\r\n    tasks: null\r\n}; \r\n\r\nconst initList = (state, action) => {\r\n    let newList = action.list; \r\n    if (state.list) {\r\n        newList = state.list;\r\n    }\r\n\r\n    return updateObject(state, {\r\n        list: newList,\r\n        selectedList: null,\r\n        tasks: null\r\n    });\r\n}\r\n\r\nconst addList = (state, action) => {\r\n    const newList = state.list.concat({\r\n        name: action.listName,\r\n        tasks: []\r\n    });\r\n    return updateObject(state, {list: newList});\r\n}\r\n\r\nconst selectList = (state, action) => {\r\n    return updateObject(state, {\r\n        selectedList: action.listIndex,\r\n        tasks: state.list[action.listIndex].tasks\r\n    })\r\n}\r\n\r\nconst addTask = (state, action) => {\r\n    const addedTasksList = state.tasks.concat({\r\n        name: action.taskName,\r\n        selected: false \r\n    }); \r\n\r\n    const newList = updateByIndex(state.selectedList, state.list, {tasks: addedTasksList});  \r\n    return updateObject(state, {\r\n        list: newList,\r\n        tasks: addedTasksList\r\n    });\r\n}\r\n\r\n\r\nconst selectTask = (state, action) => {\r\n    const newTasks = updateByIndex(action.taskIndex, state.tasks, updateObject(state.tasks[action.taskIndex], {selected: !state.tasks[action.taskIndex].selected}));  \r\n     const newList = updateByIndex(state.selectedList, state.list, {tasks: newTasks});  \r\n    return updateObject(state, {\r\n        list: newList,\r\n        tasks: newTasks\r\n    });\r\n}\r\n\r\nconst reducer = (state =initialState, action) => {\r\n    switch(action.type) {\r\n        case actionTypes.INIT_LIST: return initList(state, action);\r\n        case actionTypes.ADD_LIST: return addList(state, action);\r\n        case actionTypes.SELECT_LIST: return selectList(state, action);\r\n        case actionTypes.ADD_TASK: return addTask(state, action);\r\n        case actionTypes.SELECT_TASK: return selectTask(state, action);\r\n        default: return state;\r\n    }\r\n}\r\n\r\nexport default reducer;","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport { BrowserRouter } from 'react-router-dom'\nimport { Provider } from 'react-redux'\nimport { createStore, applyMiddleware, compose} from 'redux'\nimport thunk from 'redux-thunk'\n\nimport reducer from './store/reducers'\n\nconst composeEnhancers = process.env.NODE_ENV === 'development' ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ :null || compose;\n\nconst store = createStore(reducer, composeEnhancers(applyMiddleware(thunk)));\n\nconst app = (\n    <Provider store={store}>\n        <BrowserRouter>\n            <App /> \n        </BrowserRouter>\n    </Provider>\n);\n\nReactDOM.render(app, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}