{"version":3,"sources":["hoc/Layout/Layout.js","hoc/Auxiliary/Auxiliary.js","components/ListItem/ListItem.js","axios-config.js","shared/utility.js","store/actions.js","store/actionTypes.js","components/Modal/ConfirmationModal/ConfirmationModal.js","containers/Lists/Lists.js","components/TaskItem/TaskItem.js","containers/Tasks/Tasks.js","App.js","serviceWorker.js","store/reducers.js","index.js"],"names":["Layout","this","props","children","Component","auxiliary","ListItem","content","Auxiliary","style","width","display","margin","onClick","clicked","value","editClicked","deleteClicked","editMode","type","onChange","changeEditNameHandler","editElement","border","instance","axios","create","baseURL","updateObject","oldObject","updatedProperties","objectToList","objectList","Object","keys","map","objectKey","id","deletedList","updatedNameList","name","updatedTask","tasks","deletedTask","confirmationModal","height","position","top","left","textAlign","message","closeModal","confirmModal","Lists","state","newItem","showDeleteConfirmationModal","deleteItemId","editElementName","editItemId","selectListHandler","index","onSelectList","history","push","addNewHandler","event","preventDefault","onAddList","setState","onChangeListNameHandler","target","onChangeEditNameHandler","onEditModeHandler","editIdItem","currentListName","onEditItemHandler","onUpdateListName","onDeleteHandler","onDeleteConfirmHandler","onDeleteList","onCloseModalHandler","onInitList","list","arrayList","ConfirmationModal","listItem","key","connect","selectedTask","selectedList","dispatch","get","then","response","data","catch","error","console","log","listName","newListItem","post","addedList","actions","listIndex","delete","getState","updatedItem","put","TaskItem","editedName","checked","selected","Tasks","deleteTaskId","editTaskId","toListHandler","onChangeTaskNameHandler","onAddTask","selectTaskItemHandler","selectedIndex","onSelectTask","onDeleteTask","editIdTask","currentTaskName","onEditTaskHandler","onUpdateTaskName","taks","arrayTasks","task","to","taskName","newTask","replace","c","crypto","getRandomValues","Uint8Array","toString","taskIndex","currentTasks","taskId","updateTasks","withRouter","path","component","exact","Boolean","window","location","hostname","match","initialState","initList","action","newList","addList","deleteList","selectList","updateTask","selectTask","updateNameList","deleteTask","newTasks","reducer","composeEnhancers","compose","store","createStore","applyMiddleware","thunk","app","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9c16af3e.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Layout extends Component {\r\n    render() {\r\n        return (\r\n            <main>\r\n                {this.props.children}\r\n            </main>\r\n        );\r\n    };\r\n}\r\n\r\nexport default Layout;","const auxiliary = props => props.children;  \r\nexport default auxiliary;","import React from 'react'\r\nimport { TiDelete, TiEdit } from 'react-icons/ti'\r\nimport Auxiliary from '../../hoc/Auxiliary/Auxiliary'\r\n\r\nexport default function ListItem(props) {\r\n\r\n    let content = (\r\n        <Auxiliary>\r\n            <p style={{\r\n                width: \"150px\", \r\n                display: \"inline-block\", \r\n                margin: \"3px 0\"}} \r\n                onClick={props.clicked}>{props.value}</p> \r\n            <TiEdit onClick={props.editClicked}/>\r\n            <TiDelete onClick={props.deleteClicked}/>\r\n        </Auxiliary>\r\n    );\r\n    if (props.editMode) {\r\n        content = (\r\n            <Auxiliary>\r\n                <input \r\n                    style={{width: \"150px\"}}\r\n                    type=\"text\" \r\n                    onChange={props.changeEditNameHandler} \r\n                    value={props.value} />\r\n                <button onClick={props.editElement}>OK</button>\r\n            </Auxiliary>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div style={{\r\n                width: \"190px\",\r\n                border: \"1px solid black\",\r\n                margin: \"2px 0px\"}}>\r\n            {content}\r\n        </div>\r\n    )\r\n}\r\n","import axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://superlist-dba04.firebaseio.com'\r\n});\r\n\r\nexport default instance;","export const updateObject = (oldObject, updatedProperties) => {\r\n    return {\r\n          ...oldObject,\r\n          ...updatedProperties\r\n    }\r\n}\r\n\r\nexport const updateByIndex = (indexChange, list, updatedProperties) => {\r\n    let copyObject = [...list];\r\n    return copyObject.map((el, index)=> (\r\n         index === indexChange ?\r\n            updateObject(list[indexChange], updatedProperties):\r\n            el)\r\n    );\r\n}\r\n\r\nexport const objectToList = (objectList) => {\r\n    return Object.keys(objectList)\r\n      .map((objectKey) => ({\r\n          ...objectList[objectKey],\r\n          id: objectKey\r\n    }));\r\n  };\r\n\r\n  export const uuidv4 = () => {\r\n    return ([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g, c =>\r\n      (c ^ (crypto.getRandomValues(new Uint8Array(1))[0] & (15 >> c / 4))).toString(16)\r\n    );\r\n  }","import * as actionTypes from './actionTypes'\r\nimport axios from '../axios-config'\r\nimport { uuidv4 } from '../shared/utility'\r\n\r\nexport const initiatedList = (list) => {\r\n    return {\r\n        type: actionTypes.INIT_LIST,\r\n        list: list\r\n    }\r\n}\r\n\r\nexport const initList = (listName) => {\r\n    return (dispatch) => {\r\n        axios.get('/lists.json')\r\n            .then(response => {\r\n                dispatch(initiatedList(response.data != null? response.data: []));\r\n            })\r\n            .catch(error=> (console.log(error)));\r\n    }\r\n}\r\n\r\nconst addedList = (newListItem, id) => {\r\n    return {\r\n        type: actionTypes.ADD_LIST,\r\n        newListItem: newListItem,\r\n        id: id\r\n    }\r\n}\r\n\r\nexport const deleteList = (id) => {\r\n    return (dispatch) => {\r\n        axios.delete('/lists/'+id+'.json')\r\n            .then(response => {\r\n                dispatch(deletedList(id));\r\n            })\r\n            .catch(error=> (console.log(error)));\r\n    }\r\n}\r\n\r\nconst deletedList = (id) => {\r\n    return {\r\n        type: actionTypes.DELETE_LIST,\r\n        id: id\r\n    }\r\n}\r\n\r\nexport const updateNameList = (id, name) => {\r\n    return (dispatch, getState) => {\r\n        const updatedItem = {\r\n            ...getState().list[id],\r\n            name: name\r\n        };\r\n\r\n        axios.put('/lists/'+id+'/.json', updatedItem)\r\n            .then(response => {\r\n                dispatch(updatedNameList(id, name));\r\n            })\r\n            .catch(error=> (console.log(error)));\r\n    }\r\n}\r\n\r\nconst updatedNameList = (id, name) => {\r\n    return {\r\n        type: actionTypes.UPDATE_NAME_LIST,\r\n        id: id,\r\n        name: name\r\n    }\r\n}\r\n\r\nexport const addList = (listName) => {\r\n    return (dispatch) => {\r\n        const newListItem = {name: listName};\r\n        axios.post('/lists.json', newListItem)\r\n            .then(response => {\r\n                dispatch(addedList(newListItem, response.data.name));\r\n            })\r\n            .catch(error=> (console.log(error)));\r\n    }\r\n}\r\n\r\nexport const selectList = (index) => {\r\n    return {\r\n        type: actionTypes.SELECT_LIST,\r\n        listIndex: index\r\n    }\r\n}\r\n\r\nexport const addTask = (taskName) => {\r\n    const newTask =  {\r\n        name: taskName,\r\n        selected: false \r\n    }\r\n\r\n    return (dispatch, getState) => {\r\n        const updatedItem = {\r\n            ...getState().list[getState().selectedList],\r\n            tasks: {\r\n                ...getState().list[getState().selectedList].tasks,\r\n                [uuidv4()]: newTask\r\n            }\r\n        };\r\n\r\n        axios.put('/lists/'+getState().selectedList+'/.json', updatedItem)\r\n            .then(response => {\r\n                dispatch(updatedTask(updatedItem.tasks));\r\n            })\r\n            .catch(error=> (console.log(error)));\r\n    }\r\n}\r\n\r\n\r\nexport const updateTaskName = (taskId, taskName) => {\r\n    return (dispatch, getState) => {\r\n        const updateTasks = {...getState().list[getState().selectedList].tasks};\r\n        updateTasks[taskId].name = taskName;\r\n        const updatedItem = {\r\n            ...getState().list[getState().selectedList],\r\n            tasks: {...updateTasks}\r\n        };\r\n\r\n        axios.put('/lists/'+getState().selectedList+'/.json', updatedItem)\r\n            .then(response => {\r\n                dispatch(updatedTask(updatedItem.tasks));\r\n            })\r\n            .catch(error=> (console.log(error)));\r\n    }\r\n}\r\n\r\nexport const updatedTask = (tasks) => {\r\n    return {\r\n        type: actionTypes.UPDATE_TASK,\r\n        tasks: tasks\r\n    }\r\n}\r\n\r\nexport const selectTask = (taskIndex) => {\r\n    return (dispatch, getState) => {\r\n        const updatedItem = {\r\n            ...getState().list[getState().selectedList],\r\n            tasks: {\r\n                ...getState().list[getState().selectedList].tasks,\r\n                [taskIndex]: {\r\n                    ...getState().list[getState().selectedList].tasks[taskIndex],\r\n                    selected: !getState().list[getState().selectedList].tasks[taskIndex].selected\r\n                }\r\n            }\r\n        };\r\n\r\n        axios.put('/lists/'+getState().selectedList+'/.json', updatedItem)\r\n            .then(response => {\r\n                dispatch(updatedTask(updatedItem.tasks));\r\n            })\r\n            .catch(error=> (console.log(error)));\r\n    }\r\n}\r\n\r\nexport const selectedTask = (tasks) => {\r\n    return {\r\n        type: actionTypes.SELECT_TASK,\r\n        tasks: tasks\r\n    }\r\n}\r\n\r\nexport const deleteTask = (taskIndex) => {\r\n    return (dispatch, getState) => {\r\n        let currentTasks = {...getState().list[getState().selectedList].tasks};\r\n        delete currentTasks[taskIndex];\r\n        const updatedItem = {\r\n            ...getState().list[getState().selectedList],\r\n            tasks: {\r\n                ...currentTasks\r\n            }\r\n        };\r\n\r\n        axios.put('/lists/'+getState().selectedList+'/.json', updatedItem)\r\n            .then(response => {\r\n                dispatch(deletedTask(taskIndex));\r\n            })\r\n            .catch(error=> (console.log(error)));\r\n    }\r\n}\r\n\r\nconst deletedTask = (id) => {\r\n    return {\r\n        type: actionTypes.DELETE_TASK,\r\n        id: id\r\n    }\r\n}","export const INIT_LIST = 'INIT_LIST';\r\nexport const ADD_LIST = 'ADD_LIST';\r\nexport const DELETE_LIST = 'DELETE_LIST';\r\nexport const SELECT_LIST = 'SELECT_LIST';\r\nexport const UPDATE_NAME_LIST = 'UPDATE_NAME_LIST';\r\n\r\nexport const UPDATE_TASK = 'UPDATE_TASK';\r\nexport const DELETE_TASK = 'DELETE_TASK';\r\nexport const SELECT_TASK = 'SELECT_TASK';\r\n ","import React from 'react'\r\n\r\nconst confirmationModal = (props) => {\r\n    return (\r\n        <div style={{\r\n                width: \"300px\",\r\n                height: \"100px\",\r\n                position: \"fixed\",\r\n                top: \"40%\",\r\n                left: \"40%\",\r\n                border: \"1px solid black\",\r\n                textAlign: \"center\"            \r\n            }}>\r\n            <p>{props.message}</p>\r\n            <button onClick={props.closeModal}>Cancel</button>\r\n            <button onClick={props.confirmModal}>Confirm</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default confirmationModal;","import React, { Component } from 'react'\r\nimport ListItem from '../../components/ListItem/ListItem'\r\nimport Auxiliary from '../../hoc/Auxiliary/Auxiliary'\r\nimport { connect } from 'react-redux'\r\nimport * as actions from '../../store/actions'\r\nimport {objectToList} from '../../shared/utility'\r\nimport ConfirmationModal from '../../components/Modal/ConfirmationModal/ConfirmationModal'\r\n\r\nclass Lists extends Component {\r\n    state = {\r\n        newItem: \"\",\r\n        showDeleteConfirmationModal: false,\r\n        deleteItemId: null,\r\n        editElementName: null,\r\n        editItemId: null\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.onInitList();\r\n    }\r\n\r\n    selectListHandler = (index) => {\r\n        this.props.onSelectList(index);\r\n        this.props.history.push('/task');\r\n    }\r\n\r\n    addNewHandler = (event) => {\r\n        event.preventDefault();   \r\n        this.props.onAddList(this.state.newItem);\r\n        this.setState({newItem: \"\"});     \r\n    }\r\n\r\n    onChangeListNameHandler = (event) => {\r\n        this.setState({newItem: event.target.value});\r\n    }\r\n    onChangeEditNameHandler = (event) => {\r\n        this.setState({editElementName: event.target.value});\r\n    } \r\n\r\n    onEditModeHandler = (editIdItem, currentListName) => {\r\n        this.setState({\r\n            editItemId: editIdItem,\r\n            editElementName: currentListName\r\n        });\r\n    }\r\n\r\n    onEditItemHandler = () => {\r\n        this.props.onUpdateListName(this.state.editItemId, this.state.editElementName);\r\n        this.setState({\r\n            editItemId: null,\r\n            editElementName: null\r\n        })\r\n    }\r\n\r\n    onDeleteHandler = (deleteItemId) => {\r\n        this.setState({\r\n            showDeleteConfirmationModal: true,\r\n            deleteItemId: deleteItemId\r\n        });\r\n    }    \r\n\r\n    onDeleteConfirmHandler = () => {\r\n        this.props.onDeleteList(this.state.deleteItemId);\r\n        this.onCloseModalHandler();\r\n    }\r\n\r\n    onCloseModalHandler = () => {\r\n        this.setState({\r\n            showDeleteConfirmationModal: false,\r\n            deleteItemId: null\r\n        });      \r\n    }\r\n\r\n    render() {\r\n        let content = <p>Loading...</p>;\r\n        if (this.props.list) {\r\n            const arrayList = objectToList(this.props.list);\r\n            \r\n            content = (\r\n                <Auxiliary>\r\n                    {this.state.showDeleteConfirmationModal? \r\n                        <ConfirmationModal \r\n                            message=\"Deseja Deletar Lista?\"\r\n                            closeModal={this.onCloseModalHandler}\r\n                            confirmModal={this.onDeleteConfirmHandler}\r\n                            />: null}\r\n                    <input type=\"text\" onChange={this.onChangeListNameHandler} value={this.state.newItem} />\r\n                    <button onClick={this.addNewHandler}>+</button>\r\n                    {   arrayList.map((listItem)=>( \r\n                            <ListItem \r\n                                key={listItem.id} \r\n                                value={\r\n                                    this.state.editItemId !== listItem.id? \r\n                                    listItem.name:\r\n                                    this.state.editElementName\r\n                                } \r\n                                clicked={() => this.selectListHandler(listItem.id)} \r\n                                editClicked={() => this.onEditModeHandler(listItem.id, listItem.name)}\r\n                                deleteClicked={() => this.onDeleteHandler(listItem.id)}\r\n                                changeEditNameHandler={this.onChangeEditNameHandler}\r\n                                editElement={this.onEditItemHandler}\r\n                                editMode={this.state.editItemId === listItem.id} />\r\n                        ))\r\n                    }\r\n                </Auxiliary>\r\n            );\r\n            // if (this.props.selectedTask !== null) {\r\n            //     content = <Tasks \r\n            //                 back={this.backToListHandler} \r\n            //                 taskItems={this.props.list[this.state.selectedTask].tasks}\r\n            //                 selectTask={this.selectTaskItem}\r\n            //                 taskName={this.state.newItem} \r\n            //                 onChange={this.onChangeListNameHandler}\r\n            //                 onNewTask={this.addNewHandler}/>;\r\n            // }\r\n        }        \r\n        \r\n        return (\r\n            <div>\r\n                { content }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        list: state.list,\r\n        selectedTask: state.selectedList\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onInitList: () => dispatch(actions.initList()),\r\n        onAddList: (listName) => dispatch(actions.addList(listName)),\r\n        onSelectList: (index) => dispatch(actions.selectList(index)),\r\n        onDeleteList: (id) => dispatch(actions.deleteList(id)),\r\n        onUpdateListName: (id, name) =>  dispatch(actions.updateNameList(id, name)),\r\n    }\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps) (Lists); ","import React from 'react'\r\nimport { TiDelete, TiEdit } from 'react-icons/ti'\r\nimport Auxiliary from '../../hoc/Auxiliary/Auxiliary'\r\n\r\nexport default function TaskItem(props) {\r\n\r\n    let content = (\r\n        <Auxiliary>\r\n            <p style={{\r\n                width: \"185px\", \r\n                display: \"inline-block\", \r\n                margin: \"3px 0\"}} \r\n                onClick={props.clicked}> {props.value.name} </p>\r\n            <TiEdit onClick={props.editClicked}/>\r\n            <TiDelete onClick={props.deleteClicked}/>\r\n        </Auxiliary>\r\n    );\r\n\r\n    if (props.editMode) {\r\n        content = (\r\n            <Auxiliary>\r\n                <input \r\n                    style={{width: \"179px\"}}\r\n                    type=\"text\" \r\n                    onChange={props.changeEditNameHandler} \r\n                    value={props.editedName} />\r\n                <button onClick={props.editElement}>OK</button>\r\n            </Auxiliary>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div> \r\n            <input type=\"checkbox\" onChange={props.clicked} checked={ props.value.selected }/>\r\n             { content }\r\n        </div>\r\n    )\r\n}\r\n","import React, {Component} from 'react'\r\nimport TaskItem from '../../components/TaskItem/TaskItem'\r\nimport {Redirect} from 'react-router-dom'\r\nimport { connect } from 'react-redux'\r\nimport * as actions from '../../store/actions'\r\nimport {objectToList} from '../../shared/utility'\r\nimport ConfirmationModal from '../../components/Modal/ConfirmationModal/ConfirmationModal'\r\n\r\nclass Tasks extends Component {\r\n    state = {\r\n        newItem: \"\",\r\n        showDeleteConfirmationModal: false,\r\n        deleteTaskId: null,\r\n        editTaskId: null,\r\n        editElementName: null\r\n    }\r\n\r\n    toListHandler = () => {\r\n        this.props.history.push('/list');\r\n    }\r\n\r\n    onChangeTaskNameHandler = (event) => {\r\n        this.setState({newItem: event.target.value});\r\n    }\r\n\r\n    addNewHandler = (event) => {\r\n        event.preventDefault();   \r\n        this.props.onAddTask(this.state.newItem);\r\n        this.setState({newItem: \"\"});                \r\n    }\r\n\r\n    selectTaskItemHandler = (selectedIndex) => {\r\n        this.props.onSelectTask(selectedIndex);\r\n    }\r\n\r\n    onDeleteHandler = (id) => {\r\n        this.setState({\r\n            showDeleteConfirmationModal: true,\r\n            deleteTaskId: id\r\n        });\r\n    }    \r\n\r\n    onDeleteConfirmHandler = () => {\r\n        this.props.onDeleteTask(this.state.deleteTaskId);\r\n        this.onCloseModalHandler();\r\n    }\r\n\r\n    onCloseModalHandler = () => {\r\n        this.setState({\r\n            showDeleteConfirmationModal: false,\r\n            deleteTaskId: null\r\n        });      \r\n    }\r\n\r\n    onEditModeHandler = (editIdTask, currentTaskName) => {\r\n        this.setState({\r\n            editTaskId: editIdTask,\r\n            editElementName: currentTaskName\r\n        });\r\n    }\r\n\r\n    onChangeEditNameHandler = (event) => {\r\n        this.setState({editElementName: event.target.value})\r\n    } \r\n\r\n    onEditTaskHandler = () => {\r\n        this.props.onUpdateTaskName(this.state.editTaskId, this.state.editElementName);\r\n        this.setState({\r\n            editTaskId: null,\r\n            editElementName: null\r\n        })\r\n    }\r\n\r\n    render () {\r\n        let content = <p>Loading ...</p>;\r\n        if (this.props.selectedList !== null) {\r\n            const taks = this.props.tasks != null? this.props.tasks : [];\r\n            const arrayTasks = objectToList(taks);\r\n\r\n            content = <div>\r\n                {this.state.showDeleteConfirmationModal? \r\n                        <ConfirmationModal \r\n                            message=\"Deseja Deletar Task?\"\r\n                            closeModal={this.onCloseModalHandler}\r\n                            confirmModal={this.onDeleteConfirmHandler}\r\n                            />: null}\r\n                <button onClick={this.toListHandler}>Back</button>\r\n                <input type=\"text\" onChange={this.onChangeTaskNameHandler} value={this.state.newItem} />\r\n                <button onClick={this.addNewHandler}>+</button>\r\n                {arrayTasks.map((task) => (\r\n                    <TaskItem \r\n                        key={task.id} \r\n                        value={task} \r\n                        editedName={this.state.editElementName} \r\n                        clicked={() => this.selectTaskItemHandler(task.id)}\r\n                        deleteClicked={() => this.onDeleteHandler(task.id)}\r\n                        editClicked={() => this.onEditModeHandler(task.id, task.name)} \r\n                        changeEditNameHandler={this.onChangeEditNameHandler}\r\n                        editMode={this.state.editTaskId === task.id}\r\n                        editElement={this.onEditTaskHandler}\r\n                    />\r\n                ))}\r\n            </div>\r\n        } else {\r\n            content = <Redirect to=\"/\" />;\r\n        }\r\n        return content;\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        selectedList: state.selectedList,\r\n        tasks: state.tasks\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onAddTask: (taskName) => dispatch(actions.addTask(taskName)),\r\n        onSelectTask: (taskIndex) => dispatch(actions.selectTask(taskIndex)),\r\n        onDeleteTask: (taskIndex) => dispatch(actions.deleteTask(taskIndex)),\r\n        onUpdateTaskName: (taskIndex, taskName) => dispatch(actions.updateTaskName(taskIndex, taskName)),\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps) (Tasks);\r\n","import React from 'react'\nimport './App.css'\nimport { Route, Switch, withRouter, Redirect } from 'react-router-dom'\n\nimport Layout from './hoc/Layout/Layout'\nimport Lists from './containers/Lists/Lists'\nimport Tasks from './containers/Tasks/Tasks'\n\nfunction App() {\n  return (\n    <Layout>\n      <Switch>\n        <Route path=\"/task\" component={Tasks} />\n        <Route path=\"/\" exact component={Lists} />\n        <Redirect to=\"/\" />\n      </Switch>\n    </Layout>\n  );\n}\n\nexport default withRouter(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as actionTypes from './actionTypes';\r\nimport {updateObject} from '../shared/utility';\r\n\r\nconst initialState = { \r\n    list: null,\r\n    selectedList: null,\r\n    tasks: null\r\n}; \r\n\r\nconst initList = (state, action) => {\r\n    let newList = action.list; \r\n    if (state.list) {\r\n        newList = state.list;\r\n    }\r\n\r\n    return updateObject(state, {\r\n        list: newList,\r\n        selectedList: null,\r\n        tasks: null\r\n    });\r\n}\r\n\r\nconst addList = (state, action) => {\r\n    const newList = {...state.list};\r\n    newList[action.id] = action.newListItem;\r\n    return updateObject(state, {list: newList});\r\n}\r\n\r\nconst deleteList = (state, action) => {\r\n    const newList = {...state.list};\r\n    delete newList[action.id];\r\n    return updateObject(state, {list: newList});\r\n}\r\n\r\nconst selectList = (state, action) => {\r\n    return updateObject(state, {\r\n        selectedList: action.listIndex,\r\n        tasks: state.list[action.listIndex].tasks\r\n    })\r\n}\r\n\r\nconst updateTask = (state, action) => {\r\n    const newList = {...state.list};\r\n    newList[state.selectedList].tasks = action.tasks;\r\n    return updateObject(state, {\r\n        list: newList,\r\n        tasks: action.tasks\r\n    });\r\n}\r\n\r\nconst selectTask = (state, action) => {\r\n    const newList = {...state.list};\r\n    newList[state.selectedList].tasks = action.tasks;\r\n    return updateObject(state, {\r\n        list: newList,\r\n        tasks: action.tasks\r\n    });\r\n}\r\n\r\nconst updateNameList = (state, action) => {\r\n    const newList = {...state.list};\r\n    newList[action.id].name = action.name;\r\n    return updateObject(state, {\r\n        list: newList\r\n    });\r\n}\r\n\r\nconst deleteTask = (state, action) => {\r\n    const newTasks = {...state.list[state.selectedList].tasks};\r\n    delete newTasks[action.id];\r\n    const newList = {\r\n        ...state.list,\r\n        [state.selectedList]: {\r\n            ...state.list[state.selectedList],\r\n            tasks: newTasks\r\n        }\r\n    };\r\n    delete newList[action.id];\r\n    return updateObject(state, {\r\n        list: newList,\r\n        tasks: newTasks\r\n    });\r\n}\r\n\r\nconst reducer = (state =initialState, action) => {\r\n    switch(action.type) {\r\n        case actionTypes.INIT_LIST: return initList(state, action);\r\n        case actionTypes.ADD_LIST: return addList(state, action);\r\n        case actionTypes.SELECT_LIST: return selectList(state, action);\r\n        case actionTypes.UPDATE_NAME_LIST: return updateNameList(state, action);\r\n        case actionTypes.DELETE_LIST: return deleteList(state, action);\r\n        case actionTypes.UPDATE_TASK: return updateTask(state, action);\r\n        case actionTypes.SELECT_TASK: return selectTask(state, action);\r\n        case actionTypes.DELETE_TASK: return deleteTask(state, action);\r\n        default: return state;\r\n    }\r\n}\r\n\r\nexport default reducer;","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport { BrowserRouter } from 'react-router-dom'\nimport { Provider } from 'react-redux'\nimport { createStore, applyMiddleware, compose} from 'redux'\nimport thunk from 'redux-thunk'\n\nimport reducer from './store/reducers'\n\nconst composeEnhancers = process.env.NODE_ENV === 'development' ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ :null || compose;\n\nconst store = createStore(reducer, composeEnhancers(applyMiddleware(thunk)));\n\nconst app = (\n    <Provider store={store}>\n        <BrowserRouter>\n            <App /> \n        </BrowserRouter>\n    </Provider>\n);\n\nReactDOM.render(app, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}